/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

<%
var no_B = true;
_.each(model.fields,function(field){ if(XExt.hasAction(field.actions,'B') && !('value' in field) && (field.name) && (field.control != 'subform') && (field.control != 'button')) no_B = false; });
%>

(function(jsh){
  var _ = jsh._;
  var $ = jsh.$;
  var XExt = jsh.XExt;
  var modelid = '<%=model.id%>';
  var xmodel = jsh.XModels[modelid];

  var xcontroller = xmodel.controller = new XExt.XModel.XController(xmodel);
  var xform = null;

  xcontroller.Init = function(callback){
    xform = xcontroller.form = new jsh.XForm({
      modelid: modelid,
      API: (xmodel.getapi ? xmodel.getapi('form') : undefined),
    });
    xform.DataType = xmodel.datamodel;
    xform.Data = new xmodel.datamodel();

    var isInlinePopup = <%-xejs.iif(('inlinepopup' in model) && (model.inlinepopup),'true','false')%>;
    xform.Prop.Enabled = (isInlinePopup ? false : true);
    xform.Prop.isInlinePopup = isInlinePopup;

    <% xejs.eachKey(model.fields,function(field){  if(!field.name) return; %>xform.Data['<%=field['name']%>'] = xmodel.getBindingOrRootKey('<%=field['name']%>');<%}); %>
    xform.GetSelectParams = function(){
      var rslt = xform.GetKeys();
      if(!jsh.is_insert){
        if(jsh.is_browse) rslt._action = 'browse';
      }
      else{
        rslt._action = 'insert';
      }
      return rslt; 
    };
    xform.GetKeys = function(){
      var rslt = new Object();
      if(!jsh.is_insert){
        //Browse / Edit Record
        for(var fieldname in xmodel.bindings){
          xform.Data[fieldname] = xmodel.bindings[fieldname]();
        }
        var missingKeys = [];
        <% xejs.eachKey(model.fields,function(field){ if(!field.name) return; %>
          rslt['<%=field['name']%>'] = xmodel.get('<%=field['name']%>');
          if(typeof rslt['<%=field['name']%>'] == 'undefined') missingKeys.push('<%=field['name']%>');
        <%}); %>
        var msg = 'Binding / Querystring Error: ' + modelid + ' missing key'+(missingKeys.length > 1 ? 's' : '')+': '+ missingKeys.join(', ');
        if(missingKeys.length){
          XExt.Alert(msg);
          throw new Error(msg);
        }
      }
      else {
        //Add Record
        //Add parameters for breadcrumbs
        <% _.each(model.fields,function(field){ if(!field.name) return; if(XExt.hasAction(field.actions,'C')) { %>rslt.<%=field['name']%> = jsh.XExt.LiteralOrLookup('<%=field['name']%>',[jsh._GET,this.Data]);<% } }); %>
        <% _.each(model.fields,function(field){ if(!field.name) return; if(field.lovkey){ %>rslt.<%=field['name']%> = jsh.XExt.LiteralOrLookup('<%=field['name']%>',[jsh._GET,this.Data]);<% } }); %>
      }
      return rslt; 
    };
    var xform_origSelect = xform.Select;
    xform.Select = function(done){
      done = done || function(){};
      <%-xejs.iif(no_B,'return done(); //No data to select')%>
      if(!xform.Prop.Enabled) return done();
      return xform_origSelect.call(this, done);
    };

    //Pull keys from parent
    //Get recordset

    jsh.$root('.xelem'+xmodel.class).keyup(function(){ if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.dropdown').change(function(){ if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.checkbox').change(function(){ if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.xtagbox_base').on('input keyup', function(){ if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });

    <% _.each(model.fields,function(field){ if(!('control' in field) || !field.name) return; if((field.control=='date') && (XExt.hasAction(field.actions,'IU'))) {%>
    jsh.$root(".<%=field.name%>.xelem"+xmodel.class).datepicker({ changeMonth: true, changeYear: true, dateFormat: ('<%=(field.controlparams?field.controlparams.dateformat:'')%>'||jsh.DEFAULT_DATEFORMAT), onSelect: function(){ if(jsh.is_insert) return; xform.Data.OnControlUpdate(this); } });
    <% } }); %>

    if(xmodel.unbound){
      _.each(xmodel.fields, function(field){
        if(field.hasDefault()) xmodel.set(field.name, field.getDefault(xform.Data));
      });
    }

    callback();
  }

  xcontroller.Save = function(){
    var data = xform.Data;
    if(!data.Commit()) return;

    var q;
    if(data._is_insert) q = xform.PrepInsert;
    else q = xform.PrepUpdate;
    
    var dbtask = q.call(xform,function(rslt){
      if(data._is_insert){
        //Pull keys
        data._is_insert = false;
      }
    });
    return [dbtask];
  }

  xcontroller.SaveComplete = function(rslt){
    _.each(xmodel.fields, function(field){
      if((field.control=='password') && !(field.controlparams && field.controlparams.update_when_blank) && (!XExt.hasAction(field.actions,'B')||field.unbound)){
        XExt.setFormField(xmodel.controller.form, field.name, '');
        if(field.unbound && field.name && xmodel.unbound_data){
          for(var key in xmodel.unbound_data){
            if(field.name in xmodel.unbound_data[key]) xmodel.unbound_data[key][field.name] = '';
          }
        }
      }
    });
  }
  
  xcontroller.Delete = function(callback){
    var is_insert =  xform.Data._is_insert;
    
    XExt.Confirm("Are you sure you want to delete this "+(is_insert ? 'new ':'')+"<%=model.caption[1]%>?",function(){
      if(!is_insert){
        xform.Delete.call(xform,function(rslt){
          callback();
        });
      }
      else callback();
    });
  }

  xcontroller.Render = function(newData, action, callback){
    var xdata = xform.Data;
    if(typeof action == 'undefined') action = 'BIU';
    for(var fname in xmodel.fields){
      var field = xmodel.fields[fname];
      if(XExt.hasAction(field.actions, action)){
        if((fname in newData) && (fname in xdata)){
          xdata[fname] = newData[fname];
        }
      }
    }
    xdata._is_insert = false;
    xdata._is_dirty = false;
    xdata._is_deleted = false;
    xdata._orig = null;
    xform.Render();

    if (typeof xmodel.onload != 'undefined') if(xmodel.onload(xmodel, callback) === false) return;
    jsh.ResetLinks();
    if(callback) callback();
  }

  xcontroller.getLOV = function(fieldname){
    if(!xform.Data._LOVs) xform.Data._LOVs = {};
    return xform.Data._LOVs[fieldname];
  }

  xcontroller.setLOV = function(fieldname, lov_data){
    if(!xform.Data._LOVs) xform.Data._LOVs = {};
    xform.Data._LOVs[fieldname] = lov_data;
    xform.LOVs = xform.Data._LOVs;
  }

  xcontroller.Commit = function(tgtData, action){
    if(typeof action == 'undefined') action = 'IU';
    //_this.checkUpdatesInfo();
    var xdata = xform.Data;
    if(!xdata.Commit(action)) return false;
    if(!tgtData) return XExt.Alert('Target data set is not defined');

    for(var key in tgtData){
      if(key in xdata) tgtData[key] = xdata[key];
    }
    return true;
  }

})(<%-instance%>);