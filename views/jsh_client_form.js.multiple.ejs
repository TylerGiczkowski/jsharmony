/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

(function(jsh){
  var _ = jsh._;
  var $ = jsh.$;
  var XExt = jsh.XExt;
  var xform = null;
  var modelid = '<%=model.id%>';
  var xmodel = jsh.XModels[modelid];

  var xcontroller = xmodel.controller = new XExt.XModel.XController(xmodel);
  var xform = null;

  xcontroller.Init = function(callback){
    xform = xcontroller.form = new jsh.XForm(modelid,'','');
    xform.DataType = xmodel.datamodel;
    xform.Data = new xform.DataType();
    xform.GetSelectParams = function(){
      var rslt = {};
      if(!jsh.is_insert){
        for(var fieldname in xmodel.bindings){
          rslt[fieldname] = xmodel.bindings[fieldname]();
        }
        if(jsh.is_browse) rslt._action = 'browse';
      }
      else{
        rslt._action = 'insert';
      }
      return rslt; 
    };
    xform.GetKeys = function(){
      var rslt = new Object();
      if(!jsh.is_insert){
        <% xejs.eachKey(model.fields,function(field){  if(!field.name) return; %>rslt.<%=field['name']%> = this.Data['<%=field['name']%>']<%}); %>
      }
      else{
        for(var fieldname in xmodel.bindings){
          rslt[fieldname] = '%%%'+fieldname+'%%%';
        }
      }
      return rslt; 
    };
    
    //Pull keys from parent
    //Get recordset
    
    jsh.$root('.xelem'+xmodel.class).keyup(function(){ if(jsh.is_insert) return; if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this);; });
    jsh.$root('.xelem'+xmodel.class+'.dropdown').change(function(){ if(jsh.is_insert) return; if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.checkbox').change(function(){ if(jsh.is_insert) return; if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.xtagbox_base').on('input keyup', function(){ if(jsh.is_insert) return; if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });

    <% _.each(model.fields,function(field){ if(!('control' in field) || !field.name) return; if(field.control=='date') {%>
    jsh.$root(".<%=field.name%>.xelem"+xmodel.class).datepicker({ changeMonth: true, changeYear: true, dateFormat: ('<%=(field.controlparams?field.controlparams.dateformat:'')%>'||jsh.DEFAULT_DATEFORMAT), onSelect: function(){ if(jsh.is_insert) return; xform.Data.OnControlUpdate(this); } });
    <% } }); %>

    if(xmodel.unbound){
      _.each(xmodel.fields, function(field){
        if(field.hasDefault()) xmodel.set(field.name, field.getDefault(xform.Data));
      });
    }

    callback();
  }

  xcontroller.Save = function(){
    return xform.PrepSaveDataSet();
  }

  xcontroller.SaveComplete = function(rslt){
    //Reset password to blank
    _.each(xmodel.fields, function(field){
      if((field.control=='password') && !(field.controlparams && field.controlparams.update_when_blank) && (!XExt.hasAction(field.actions,'B')||field.unbound)){
        xmodel.set(field.name, '');
        if(field.unbound && field.name && xmodel.unbound_data){
          for(var key in xmodel.unbound_data){
            if(field.name in xmodel.unbound_data[key]) xmodel.unbound_data[key][field.name] = '';
          }
        }
      }
    });
    //Keep unbound field values
    var dbrsltsuffix = '_'+modelid;
    for(var dbrslt in rslt){
      if(XExt.endsWith(dbrslt,dbrsltsuffix)){
        var taskidx = dbrslt.substr(0,dbrslt.length - dbrsltsuffix.length);
        var dbtaskid = 'insert_'+taskidx;
        if(dbtaskid in xform.DBTaskRows){
          var dbrowid = xform.DBTaskRows[dbtaskid];
          xform.DataSet[dbrowid] = _.extend(xform.DataSet[xform.Index], rslt[dbrslt]);
          xmodel.saveUnboundFields(xform.DataSet[dbrowid]);
          if(xform.Index == dbrowid) xform.Data = _.extend(xform.Data, rslt[dbrslt]);
        }
      }
    }
  }

  xcontroller.Delete = function(){
    if(!xmodel._is_insert){
      XExt.Confirm("Are you sure you want to delete this <%=model.caption[1]%>?",function(){
        xform.Delete.call(xform,function(rslt){
          XExt.Alert('Done');
        });
      });
    }
    //Redirect away
  }

})(<%-instance%>);