/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

<%
var no_B = true;
_.each(model.fields,function(field){ if(XExt.hasAction(field.actions,'B') && (field.control != 'html') && (field.control != 'subform') && (field.control != 'button')) no_B = false; });
%>

(function(jsh){
  var _ = jsh._;
  var $ = jsh.$;
  var XExt = jsh.XExt;
  var modelid = '<%=model.id%>';
  var xmodel = jsh.XModels[modelid];

  var xcontroller = xmodel.controller = new XExt.XModel.XController(xmodel);
  var xform = null;

  xcontroller.Init = function(callback){
    xform = xcontroller.form = new jsh.XForm(modelid,'','');
    xform.DataType = xmodel.datamodel;
    xform.Data = new xmodel.datamodel();

    var isInlinePopup = <%-xejs.iif(('inlinepopup' in model) && (model.inlinepopup),'true','false')%>;
    xform.Prop.Enabled = (isInlinePopup ? false : true);
    xform.Prop.isInlinePopup = isInlinePopup;

    <% xejs.eachKey(model.fields,function(field){ if(!field.name) return; %>xform.Data['<%=field['name']%>'] = xmodel.getBindingOrRootKey('<%=field['name']%>');<%}); %>
    xform.GetSelectParams = function(){
      var rslt = xform.GetKeys();
      if(jsh.is_browse) rslt._action = 'browse';
      return rslt; 
    };
    xform.GetKeys = function(){
      var rslt = new Object();
      if(!jsh.is_insert){
        //Browse / Edit Record
        for(var fieldname in xmodel.bindings){
          xform.Data[fieldname] = xmodel.bindings[fieldname]();
        }
        <% xejs.eachKey(model.fields,function(field){ if(!field.name) return; %>rslt['<%=field['name']%>'] = xmodel.get('<%=field['name']%>');<%}); %>
      }
      else {
        //Add Record
        //Add parameters for breadcrumbs
        <% _.each(model.fields,function(field){  if(!field.name) return; if(XExt.hasAction(field.actions,'C')) { %>rslt.<%=field['name']%> = jsh.XExt.LiteralOrLookup('<%=field['name']%>',[jsh._GET,this.Data]);<% } }); %>
      }
      return rslt; 
    };
    var xform_origSelect = xform.Select;
    xform.Select = function(done){
      done = done || function(){};
      if(!xform.Prop.Enabled) return done();
      return xform_origSelect.call(this, done);
    };

    //Pull keys from parent
    //Get recordset

    jsh.$root('.xelem'+xmodel.class).keyup(function(){ if(jsh.is_insert) return; if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this);; });
    jsh.$root('.xelem'+xmodel.class+'.dropdown').change(function(){ if(jsh.is_insert) return; if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.checkbox').change(function(){ if(jsh.is_insert) return; if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.xtagbox_base').on('input keyup', function(){ if(jsh.is_insert) return; if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });

    <% _.each(model.fields,function(field){ if(!('control' in field) || !field.name) return; if(field.control=='date') {%>
    jsh.$root(".<%=field.name%>.xelem"+xmodel.class).datepicker({ changeMonth: true, changeYear: true, dateFormat: ('<%=(field.controlparams?field.controlparams.dateformat:'')%>'||jsh.DEFAULT_DATEFORMAT), onSelect: function(){ if(jsh.is_insert) return; xform.Data.OnControlUpdate(this); } });
    <% } }); %>

    if(xmodel.unbound){
      _.each(xmodel.fields, function(field){
        if(field.hasDefault()) xmodel.set(field.name, field.getDefault(xform.Data));
      });
    }

    callback();
  }

  xcontroller.RunReport = function(params, callback){
    if(!params) params = {};
    if(!xform.Data.Commit()) return;
    if(xmodel.layout !== 'report'){ XExt.Alert('Model is not a report'); return; }
    var url = '';
    if(params.output=='html') url = jsh._BASEURL + '_d/_report_html/';
    else url = jsh._BASEURL + '_d/_report/';
    url += modelid+'/';
    url += '?'+ $.param(xform.GetFieldParams('B'));
    //Pull fields into URL
    window.open(url,'_blank');
  }

  xcontroller.TestQueue = function(callback){
    if(!xform.Data.Commit()) return;
    if(xmodel.layout !== 'report'){ XExt.Alert('Model is not a report'); return; }
    var url = '';
    url = jsh._BASEURL + '_d/_reportjob/'+modelid+'/';
    url += '?_test=1&'+ $.param(xform.GetFieldParams('B'));
    window.open(url,'_blank');
  }

  xcontroller.RunQueue = function(callback){
    if(!xform.Data.Commit()) return;
    if(xmodel.layout !== 'report'){ XExt.Alert('Model is not a report'); return; }
    //XForm to XGet -> ReportJob
    var xpostform = new jsh.XForm('_reportjob/'+modelid,'','');
    xpostform.Data = xform.GetFieldParams('B');
    xpostform.Execute(function(rslt){ 
      if('_success' in rslt){
        XExt.Alert('Successfully queued '+rslt._success+' '+((rslt._success==1) ? 'report':'reports')+'.');
      }
    });
    //Show message box with result
  }

  xcontroller.RunDBFunc = function(cb,options){
    if(typeof options == 'undefined') options = {};
    var callback = cb;
    if(cb && !_.isFunction(cb)){
      var data_url = $(cb).attr('data-url');
      if((typeof data_url !== undefined) && (data_url !== false)){
        callback = function(){ XExt.navTo(data_url); };
      }
    }
    if(!xform.Data.Commit()) return;
    //Execute DBFunc
    var xpostform = new jsh.XForm(modelid,'','');
    xpostform.GetUpdateParams = function(){ return xform.GetFieldParams('U'); }
    if(options.onBeforeUpdate) options.onBeforeUpdate();
    xpostform.Update(function(rslt){ 
      if('_success' in rslt){
        //Merge data back
        if((modelid in rslt) && rslt[modelid]){
          if(rslt[modelid].length > 0){
            for(var k in rslt[modelid][0]){
              if(k in xform.Data){
                xform.Data[k] = rslt[modelid][0][k];
              }
            }
          }
        }
        if(options.noMessage){
          if(cb) callback(rslt);
        }
        else{
          XExt.Alert('Operation completed successfully.',function(){
            if(cb) callback(rslt);
          });
        }
      }
    },function(err){
      if(options.onFail) options.onFail(err);
    });
  }

})(<%-instance%>);

<%-jsh.RenderView('jsh_exec.js.datamodel',ejsparams)%>