/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

// Canonical Example
{
  "layout": "grid", //grid, form, form-m, multisel, exec
  "inherits": "C_CA", //Inherit from another form
  "table": "V_E001L",
  "caption": [ "", "Client", "Clients" ], //Three-item array, first item is ignored
  "caption": [ "Client", "Clients" ], //Two-item array
  "caption": [ "Client Information" ], //One-item array
  "title": 
    //Title string:
    "CLIENT - @c_name - STRD" //Can use dynamic parameters from jshsite.globalparams: @c_name, or <#=data.c_name#> for form data, or <#=bcrumbs.PL_YEAR_TXT#> for breadcrumb SQL data, <#=_GET.TO_ID#> for GET Parameters
    //Title with fields from form data:
    "<#=data.c_name#>"
    //Title with fields from breadcrumb sql:
    "<#=bcrumbs.PL_YEAR_TXT#>"
    //Title with GET parameters:
    "<#=_GET.TO_ID#>"
    //Title with SQL lookup
    { "sql":"select getdate()" } //"nodatalock":["c_id"] (If applicable)
    //Title with separate Add/Edit titles
    {
      "insert": "Add Customer",
      "update": "Edit Customer",
      "browse": "View Customer",
    }
    //Title with separate Add/Edit SQL lookups:
    {
      "insert": { "sql":"select getdate()" }, //"nodatalock":["c_id"] (If applicable)
      "update": { "sql":"select c_name||' Contacts' from c where c_id=@c_id" }, //"nodatalock":["c_id"] (If applicable)
      "browse": { "sql":"select c_name||' Contacts' from c where c_id=@c_id" }, //"nodatalock":["c_id"] (If applicable)
    }
    //If the title is not set, the caption will be used.  If the caption is not set, the model ID will be used
    //The topmost form's title will be used in the window title
    //If the title is set to blank on a tabbed form, the current tab's title will be used for the window title
  "menu": "clients",  //Can be set to either the top menu id or submenu id
  "actions": "B", //B,BI,BIU,BD,BID,BIUD
  "roles": { "X_X": "*", "X_B": "B" }, //By default, only SYSADMIN & DEV have access.  Permissions only assigned to "main" site, not "client" site
  "roles": 
    "main":   { "SYSADMIN": "*", "*": "B" },
    "client": { "C*": "B" }
  },
  "using": ["jsHarmonyFactory"], //Namespaces used by this model
  "dev": 1, //Enable for users with the "DEV" role, not for users with the "SYSADMIN" role
  "db": "default", //Optional property - use an alternate database connection
  "popup": [ 1000, 900 ],
  "sort": [ "^E_Name asc", "^c_name" ], //^ = Ascending or v = Descending
  //Alternate Syntax
  "sort": [ {"E_Name": "asc"}, {"c_name": "desc"} ],
  "default_search": [{"Column":"C_Name","Value":"Smith","Join":"and","Comparison":"contains"}],
  "samplerepeat": 5,
  "rowlimit": 5, //Maximum rows returned per iteration in GridView
  "querystring": { "&action": "update", "|c_id": "@c_id" }, //QueryString Defaults/Overrides = &Override, |Default
  "breadcrumbs":{
    "parents": ["QC_DBDW","CCL","<a href='PLRNDW?action=update&PL_ID=<#=bcrumbs.PL_ID#>&tabs=%7B&quot;PLRNDW&quot;%3A&quot;PLRL&quot;%7D'>RND - <#=bcrumbs.PL_YEAR_TXT#> - <#=bcrumbs.PL_TYPE_TXT#></a>"], //Simple Breadcrumbs, array of parents.  Can also use HTML and Dynamic JS
    "title": "Client", //Title Override for Breadcrumbs, can use <#=bcrumbs.PL_YEAR_TXT#> for breadcrumb SQL data
    "sql": "select PL_ID,PL_YEAR_TXT,PL_TYPE_TXT from V_PLL where PL_ID=isnull(@PL_ID,(select PL_ID from PLR where PLR_ID=@PLR_ID))",
    "sql_params":["c_id","t_id"],
    "nodatalock": ["c_id"],
    "insert": { /* parents, title, sql, sql_params, nodatalock */ },
    "update": { /* parents, title, sql, sql_params, nodatalock */ },
    "browse": { /* parents, title, sql, sql_params, nodatalock */ }
    }
  },
  "helpid": "CL",
  "js": "function(){}", //Custom JS to be included client-side.  Concatenated with model.js
  "ejs": "HTML CONTENT", //Custom EJS to be included client-side.  Concatenated with model.ejs
  "css": "CSS CONTENT",  //Custom CSS to be included client-side.  Concatenated with model.css
  "tabpos": "top", //top,bottm
  //"curtab":1, //VIRTUAL PROPERTY, DO NOT OVERWRITE
  //sqlselect, sqldownloadselect, sqlinsertencrypt, sqlupdate, sqldelete, sqlrowcount,sqlgetkey
  "sqlinsert":"insert into %%%TABLE%%%(%%%FIELDS%%%) values(%%%VALUES%%%);%%%GETINSERTKEYS%%%",
  "sqlexec": "exec dbo.PLE_NOTIF @c_id,@MDate", //Used by EXEC.  Be sure to add %%%DATALOCKS%%% if applicable
  "sqltype": "multirecordset", //recordset, multirecordset  Used by EXEC.
  "sqlwhere": "C_STS='ACTIVE'", //Additional search query for grid
  "sqlgetinsertkeys": "select scope_identitiy() as CHG_ID;",
  //onload(xmodel,callback) - Returns false to not bubble (Executed once all selects are complete, on every reselect.  Callback pulls execution away from main thread, return false, and reset links on completion,
  //onloadimmediate(xmodel) - Runs immediately once select is complete, instead of when all selects are complete for all subforms
  //oninit(xmodel) (Executed when form is first loaded)
  //oninsert(xmodel,urlkeys,url) (FORM ONLY) Returns false to not bubble - Executed after insert operation is completed
  //onvalidate(xmodel, callback) - Must return callback(true) if validation succeeded and handle errors
  //onupdate (xmodel) FORM ONLY)
  //ondestroy (xmodel)
  //oncommit(xmodel, rowid, callback) (GRID ONLY) - Executes after db Update / Insert / Delete.
  //onloadstate(xmodel, state)
  //ongetstate(xmodel)
  //onrowbind(xmodel,jobj,datarow) (GRID ONLY)
  //onroute (routetype ('singlepage'), req, res, f, require, jsh, modelid, params) - Server-side reroute to different page if necessary, called before any ent data loaded - TOW
  //    routetypes: singlepage, model, d, d_transaction, csv, report, d_report, d_report_html, d_reportjob
  //    params = { query: {...}, post: {...} }
  //getapi(apitype)
  "nokey": 1, //No primary key - only browse
  "nodatalock": ["c_id"],
  "unbound": 1, //Disable any AppSrv operations
  "tabs": [
    { "name": "General", "caption": "General Info", "target": "C", "bindings": { "c_id": "c_id" }, "showcode": ["VIEW","EDIT"],
      "roles": { "main": ["*"], "client": ["CX_B","CX_X"] }
    },
    { "name": "General", "__REMOVE__": 1 }
    //showcode - If the value of the column defined in model.tabcode is not one of the values of showcode, hide the tab entirely
    //If no caption is specified, name will be used as the caption
  ],
  "tabcode": "A_TYPE", //The column used as a basis for "showcode" - hiding or showing tabs.  Must be defined as a parameter
  "bindings": {"J_ID":"J_ID"}, //Additional bindings for top-level forms
  "tabpanelstyle": "min-width:900px;",
  "tablestyle": "min-width:700px;",
  "formstyle": "min-width:900px;",
  "inlinepopup": 1, //Used internally by program for popuplov child grid
  "code_val": "J_ID", //Used internally by program for popuplov child grid
  "disableautoload": 1, //Disables autoload in grid on scroll to bottom
  "buttons": [
    { 
      "link": "insert:H", 
      "icon": "insert", 
      "text": "Add %%%CAPTION%%%", 
      "actions": "I", 
      "bindings": { "n_scope_id": "n_scope_id", "n_scope": "'C'", "c_id":  "n_scope_id", "n_type":  "'C'" },  //bindings syntax: js:return xmodel.id
      "style": "", 
      "class": "", 
      "roles": { "client": { "CLIENT": "*", "C_ADMIN": "B" } }, 
      "hide_when_target_inaccessible": true, //If true, Insert buttons will not show if "I" permission is not on the target form.  True by default.
      "nl": 1 }, //or just put the link for add
    {"link":"js:jsh.App.C_LOVBAR.Add(this,modelid);", "icon": "insert", "text": "Add Customer", "actions": "B" },
    {"link": "savenew:", "icon": "insert", "text": "Save and New", "actions": "IU" }
    {"link": "savenew:", "icon": "insert", "text": "Save and New", "actions": "IU", "group":"Actions" }
    //"link":"js:XExt.popupReport('I',{ c_id: 97 },{ width:900, height:500 });"
  ],
  "hide_system_buttons" : ["print","export","help","search","clear","insert","add","delete","save"], //Current only on Grid
  "rowstyle": "<#=xejs.iif(1==1,'color:red;','color:yellow;')#>", //Used in grid to style rows dynamically
  "rowclass": "<#-xejs.case(datarow['PLE_SEL_NOTIF'],'xgrid_row_highlight',!datarow['PLE_SEL_NOTIF_OK'],'xgrid_row_disabled')#>", //Used in grid to style rows dynamically
    //xejs.iif(condition,true,[false])  [false] result is optional
    //xejs.case(condition1,result1,condition2,result2,[catchall_result])
  "reselectafteredit": "row",    "comment1":"row, or blank",
  "newrowposition": "last",      "comment2":"first or last",
  "commitlevel": "row",          "comment3":"cell, row, page, auto, or none", //auto=(if not editable, "none" - if top-level, "row", if subform "page"
  "validationlevel": "cell",     "comment4":"cell, or row",
  "noresultsmessage":  "No results found %%%FORSEARCHPHRASE%%%",
  "grid_expand_search": 1,
  "grid_rowcount":  1,
  "grid_require_search": 1, //Do not initially load results
  "grid_static": 1, //Static (uneditable) grid for fast rendering
  "duplicate": {"target": "E_DUPLICATE", "bindings": {"e_id":"e_id", "c_id": "c_id"},"link_on_success":"update:EW&e_id=new_e_id","button_text": "Duplicate Item"},
  "templates": { "grid": ".xgrid_calendar_template" },
  "onecolumn": true, //Add newline (nl) after each form field except the first. (form, form-m)  Automatically align width of captions
  "fields": [
    {
      "name": "e_name",
      "type": "varchar", //bigint, varchar, date, decimal, float, int, datetime, char, smallint, tinyint, file, hash, encascii, time, boolean, binary
      "length": "255",
      "precision": [12,6], //For decimal, default is 10,4 if omitted
      "precision": 53, //For float
      "key": 1, //If key exists, then this is a key field
      "foreignkey": 1, //Field is a foreign key (used to ensure datalocks are correctly applied)
      "lovkey": 1, //Used by Multisel to enable additional foreign key in LOV expression, without being a required parameter
      "always_editable": 1, //Field is always editable, regardless of field.actions / field.readonly.  Can only be used with unbound fields.
      "unbound": 1, //Field is completely unbound, not added to Fields array
      "sqlselect": "@BXBUY_ID", //Override select sql for this field on Grid select
      "sqlupdate": "@BXBUY_ID+5",
      //sqlinsert
      "sqlwhere": "x like @E_Name", //Custom where express for "F" fields in Grid
      "caption": "Employee",
      "caption_ext":  "Employee Name", //Optional longer caption for Search & Validation
      "captionstyle": "font-size:12px;",
      "captionclass": "classname",
      "captioncolon": true, //Applies to form/form-m/exec - whether display a colon after the caption.  If set to a string, the caption will be replaced by the target string
      "hidden": 1, //**Deprecated**, use "control":"hidden"
      "actions": "B", //BIUD, or F for foreign key, S for Grid Search in addition to any B.  html and button controls auto-add "B" rights. **C - crumbparameter deprecated**
      "datalock": { "c_id": "client_c_id" }, //Link DataLock ID to query in _config.datalocks.
      "control": "label", //label,html(value),textbox,textzoom,dropdown,date,textarea,htmlarea,subform,hidden,password,file_upload,file_download,image,button,linkbutton,tree,checkbox,tagbox
      "controlparams": {
                       {  //file_upload params
                          "sqlparams": {"file_size": "doc_size",  //File Size
                             "file_extension": "d_ocext", //File Extension
                             "file_upload_timestamp": "doc_uptstmp", //Upload Timestamp - will be combined with jsh.map.timestamp sql
                             "file_upload_user": "doc_upuser", //Upload User - will be combined with jsh.map.current_user sql
                             "file_name": "doc_filename" //Target file name for download
                           },
                           "image": {
                             "crop": [800,600], //Use either crop or resize
                             "resize": [800,600],
                             "resize": [225,75,{ "upsize": true, "extend":  true }], //upsize = increase size if smaller, extend = increase size to max, center content
                             "format": "jpg", //jpg or png
                           },
                           "thumbnails": {
                             "D_Medium": { //Key = file name
                               "crop": [800,600], //Use either crop or resize
                               "resize": [800,600],
                               "resize": [225,75,{ "upsize": true, "extend":  true }],
                               "format": "jpg", //jpg or png
                             } 
                           },
                           "download_button": "Download", //Text for download button
                           "preview_button": "View", //Text for preview button - opens within new browser window
                           "upload_button": "Upload", //Text for upload button
                           "delete_button": "Delete", //Text for delete button
                           "show_thumbnail":"small", //Target thumbnail for display
                           "preview_on_click":true,  //Whether to link to preview the full image on click
                           "data_folder": "D",//Folder for files, must be unique per data_file_prefix
                           "data_file_prefix": "c_doc", //File prefix in PREFIX_KEY.EXT (defaults to field name if blank or not set)
                           "_data_file_has_extension": false, //System parameter.  Automatically set to true if sqlparams.file_extension not set.  Slower because a directory search is required on each request.  
                      }, 
                      { //file_download params
                        "sqlparams": {
                          "file_extension": "d_ext", //File Extension
                          "file_name": "d_filename" //Target file name for download
                        },
                        "download_button": "Download", //Text for download button
                        "data_folder": "D",//Folder for files, must be unique per data_file_prefix
                        "data_file_prefix": "c_doc", //File prefix in PREFIX_KEY.EXT (defaults to field name if blank or not set)
                        "_data_file_has_extension": false, //System parameter.  Automatically set to true if sqlparams.file_extension not set.  Slower because a directory search is required on each request.  
                      },
                      { //image params
                        "sqlparams": {
                          "file_extension": "d_ext", //File Extension
                          "file_name": "d_filename" //Target file name for download
                        },
                        "show_thumbnail":"small", //Target thumbnail for display, or "true" first first thumbnail or image
                        "preview_on_click":true,  //Whether to link to preview the full image on click
                        "data_folder": "D",       //Folder for files, must be unique per data_file_prefix
                        "data_file_prefix": "c_doc", //File prefix in PREFIX_KEY.EXT (defaults to field name if blank or not set)
                        "_data_file_has_extension": false, //System parameter.  Automatically set to true if sqlparams.file_extension not set.  Slower because a directory search is required on each request.  
                      },
                      {"item_context_menu": [ //tree params - Context Menu for an Item
                          { "icon": "insert", "text": "Add", "command": "XExt.Alert('insert' + context_item);", "actions": "IUD", "onrender": "(context_item, data) /* JS */ return false to hide;" }
                        ],
                        "expand_all": false, //Show nodes expanded by default
                        "expand_to_selected": true, //Defaults to true
                        "lazy_render": false, //Render nodes as needed, instead of up-front
                        //Move one node to another
                        "onmove": "_this.control_onmove(dragval, dropval, anchor, e);",
                        //Drop external file onto tree node
                        "ondrop": "_this.control_ondrop(dropval, anchor, e);",
                        "drag_anchor_settings": { "anchors": ["top","bottom","left","right","full"] },
                      },
                      {"value_true":"ON",   //checkbox params
                       "value_false":"OFF",
                       "value_hidden":""
                      },
                      {"grid_save_before_update": 1, //subform params
                       "insert_link": "add:CA", //In case of subform with "form" layout, link is used for "insert" button when record not found
                       "panelstyle": "",
                      },
                      {"update_when_blank": false, //password params
                      },
                      {                            //htmlarea params
                        "htmlarea_config": {  //CKEditor Config Overrides
                          "toolbar": [
                            ['Styles', 'Format', 'Font', 'FontSize'],
                            ['Bold', 'Italic', 'Underline', 'StrikeThrough', '-', 'Undo', 'Redo', '-', 'Cut', 'Copy', 'Paste', 'Find', 'Replace', '-', 'Outdent', 'Indent', '-', 'Print'],
                            ['NumberedList', 'BulletedList', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
                            ['Image', 'Table', 'HorizontalRule', '-', 'Link', 'Smiley', 'TextColor', 'BGColor', 'Source', 'Maximize']
                          ]
                        }
                      },
                      { //**Deprecated** - moved to field.popuplov
                       "code_val": "j_id", //**Deprecated**
                       "popupstyle": "height:200px;", //**Deprecated**
                       "popup_copy_results": { "c_name": "c_name" }, //**Deprecated**
                       "base_readonly":  1, //**Deprecated**
                       "onpopup" //**Deprecated**
                      },
                      { "dateformat": "mm/dd/y" }, //**Deprecated** auto-generated from format - DatePicker Params - dateformat is parameter to jQuery datepicker control for date display
      }
      "controlstyle": "font-size:12px;",
      "controlclass": "classname",
      "onchange": "console.log(JSON.stringify(obj));console.log(newval);XExt.Alert('test'); undoChange();",//JavaScript Event Handler for onchange event
      //onchange(obj,newval,undoChange,e)
      "ongetvalue": "return jsh._GET['E_ID'];", //JavaScript Event Handler that fire when "GetValue" is called - before field is sent to the database
      //ongetvalue(val,field,xmodel,jctrl,parentobj)
      "password": "E_SSN", // For type=encascii
      "salt": "E_SSNHASH", // For type=hash
      "roles": {"CX_X": ""}, //"" to remove actions, * for all actions, else BIUD
      "format": "phone", //"phone", or "date:'MM/DD/YY HH:mm'", or "tstmp", or "MMDDYY", or "time:'h:mm A'", or "time:'HH:mm'", or "decimal:2", or "decimalext:2" (Decimal that doesn't round up, only adds zeros, up to 20 decimal places), or "decimalcomma:2", or "comma", or "ssn", or "ein", or "bool", or "json"   //Date uses Moment.js
                         //Can alternatively use array syntax for parameters: ["date","MM/DD/YY HH:mm"]
                         //Read-only formatters: "bytes", "js:return (val||'').toString()"
      "validate": [ "Required", "MaxLength:5", "MinLength:5", "IsNumeric", "IsNumeric:true" (Only positive), "IsDecimal", "IsDecimal:3" (3 decimal places), "IsDecimalComma:2" (Decimal 2 places with commas), "MaxValue:999", "MinValue:100", "RegEx:'/regex/','be a correct value.'", "IsEmail", "IsDate", "IsSSN", "Equals:field.name", "Equals:'_obj.fieldname','Caption'", "Equals:5,'Five'" ],
      "validate": [ //Alternative extended syntax, array can be mixed with string syntax
        { "actions":"BIUD", "function": "MaxLength:20", "caption": "Customer Name", "selector": ".c_name.xelemC" }, //Each parameter except "function" is optional
        { "actions":"BIUD", "function": "Required", "caption": "Customer Name", "selector": ".c_name.xelemC" }
      ],
      // File can be , ["Required", "MaxSize:5000000" (bytes), "Extension:['.PDF','.JPEG']"]
      "sample": "John Smith",
      "value": "John Smith",
      "link": "update:CW", //for grid, "insert:", "browse":, "select", "url:", "download:"...also added tab syntax: "update:JW&tabs={\"JW\":\"J_QUICK\"}"
      //LOV sql_params must be defined as fields, and must be in the request QueryString
      "lov": { 
        "sql": "select HP_CODE as code_val,HP_Desc as code_txt from HP where 1=1 %%%TRUNCATE%%% order by HP_Desc", 
        "datalock":{"c_id":"client_c_id"}, 
        "sql_params":["c_id","t_id"],
        "sqlselect": "(select hp_desc from jsharmony.hp where hp.hp_code = h.hp_code)",
        "sqltruncate": "HP_CODE=@HP_CODE", //Limit list to one entry - parameter = field.name
        "always_get_full_lov": 1, //Do not truncate LOV to one value, when field is "B", readonly, or value is set in querystring.
        "db": "default", //Optional property - use an alternate database connection
        "blank": true, //Whether to allow a "blank" option.  Can optionally be set to the text of the blank option
      }, //code_val = Value, code_txt = Desc    "nodatalock":["c_id"] (If applicable)
      "lov": { "sql": "select fcert_id as code_id,fcert_parent_id as code_parent_id,fcert_id as code_val,fcert_name as code_txt,'folder' as code_icon from fcert where c_id=(select c_id from E where e_id=@e_id) order by fcert_parent_id, fcert_name, fcert_id", "sql_params":["e_id"] }, //For Tree Control
      "lov": { "sql2": "select X_ID as code_parent, HP_CODE as code_val,HP_Desc as code_txt from HP order by HP_Desc","parent": "ca_country", "datalock":{"c_id":"client_c_id"} }, //code_parent = Parent Value, code_val = Value, code_txt = Desc
      "lov": { "sqlmp": "select X_ID as code_parent1, Y_ID as code_parent2, HP_CODE as code_val,HP_Desc as code_txt from HP order by HP_Desc","parents": ["ca_country","other"], "datalock":{"c_id":"client_c_id"} }, //code_parent[#] = Parent Value, code_val = Value, code_txt = Desc
      "lov": { "code": "e_sts" },
      "lov": { "code2": "dscope_dctgr", "schema": "jsharmony","blank": 1,"parent": "ca_country" }, //Alternatively, blank can be set to text: "blank":"(None)" otherwise defaults to "Please Select..."
      "lov": { "code2": "jsharmony.dscope_dctgr","parent": "ca_country" }, //Short schema syntax
      "lov": { "code": "e_ctgr", "showcode": 1 }, //showcode ignores the code_txt and shows the code_val on the front-end.  Useful for States
      "lov": { "code2": "dscope_dctgr", "schema": "jsharmony","blank": 1,"parent": "ca_country" },
      "lov": { "values": [{ "code_val": "ACTIVE", "code_txt": "Active" },{ "code_val": "CLOSED", "code_txt": "Closed" }] },
      "lov": { "values": { "ACTIVE": "Active", "CLOSED": "Closed" } },
      "lov": { "values": "#LOV_STATUS_AC" },
          config.macros = {
            "LOV_STATUS_AC": [{ "code_val": "ACTIVE", "code_txt": "Active" },{ "code_val": "CLOSED", "code_txt": "Closed" }] 
          }
      "lov": { "values": { "ACTIVE": "Active", "CLOSED": "Closed" }, "post_process": "console.log(values);" },
        //"post_process": "jsh.generateLOVTree(values);"   jsh.generateLOVTree(values, { separator: '/', root_txt: '(Root)', default_root: true })
      "eol": 1,
      "popuplov": {  //Enable POPUPLOV, requires target grid
                       "target":  "J",
                       "code_val": "j_id",
                       "popupstyle": "height:200px;",
                       "popup_copy_results": { "c_name": "c_name" },
                       "base_readonly":  1,
                       "onpopup": "console.log('popup');", //(popupmodelid, parentmodelid, fieldid, onComplete)
                       "popupiconstyle": "display:none;",
                      },
      "default": "USA",
      "default": "js:moment().format()",
      "default": { "sql": "select c_name from c where c_id=@c_id", "sql_params": ["c_id"] }, //"nodatalock":["c_id"] (If applicable)
      "readonly": 1,
      "locked_by_querystring": true, //Make field uneditable when querystring defaults are applied.  Default is true
      //for subform, popuplov
      "target": "E_Name",
      "bindings": { "c_id": "c_id" },
      "cellclass": "", //For Grid / Multisel table
      "cellstyle": "width:300px;"  //For Grid / Multisel table
      "html": "<a href='/<#=data['c_id']#>'><#=data['c_name']#></a>" //**Deprecated**, used "control":"html"
      "block": true, //Whether this should be rendered as a block element
                     //If true, wrap a div around the field + caption, and do not add a line-break after (ignore next field's field.nl)
      "blockclass": "", //Class of block wrapper
      "blockstyle": "", //Style for block wrapper
      "serverejs": 1, //Evaluate EJS server-side (for HTML)
      "disable_sort": 1, //Only applies to grid
      "enable_search": 1, //Only applies to grid, enable search if it is a hidden column
      "disable_search": 1, //Only applies to grid, do not display as a search column
      "disable_search_all": 1, //Only applies to grid, do not query in "Any" search
      "sqlsort": "(case when X then 1 else 0 end)", //Only applies to grid
      "sqlsearch": "(case when X then 1 else 0 end)", //Only applies to grid
      "sqlsearchsound": "c_id in (select c_id from SDX where SDX_COL='CN' and SDX_VAL=SOUNDEX(%%%FIELD%%%))",
      "__REMOVE__":1, //Remove Model field in inherited child
      "***property***":"__REMOVEPROPERTY__", //Remove property from inherited child
      "__AFTER__": "FIELDNAME", "__START__", "__END__", //Position in inherited child
      //SYSTEM: datatype_config, sql_from_db, sql_to_db
    }
  ],
  "dberrors": [
    [ "UNQ_H_H_UNIQUE", "This Help Panel has already been defined." ],
    [ "/UNQ_H_H_[UN]*IQUE/", "This Help Panel has already been defined." ]
    //If error/warning/notice begins with "Application Error - " we will show the error message.
    //If error/warning/notice begins with "Application Warning - " we will show the warning message
    //If error/warning/notice has the format "Execute Form - MESSAGE //C?c_id=1" we will show the message and open the form
  ],
  "display_layouts": {
    "standard": {
      "title": "Standard",
      "columns": [
        "column_name_1",
        "column_name_2"
         //HTML columns with field.value are always displayed
         //Columns with field.control="hidden" are never displayed
      ]
    }
  },
  "source_files_prefix": "AUDL", //Prefix for source file extensions (prefix.ejs, prefix.js, ... )
  //Auto-generated
  "_inherits": ["CL_X","CL"] //Array of parent models
  "_basemodel": "CL" //Base parent model
  "_referencedby": ["C","C_CC"], //Forms that link to this form
  "_sysconfig": {},
  "_transforms": [],
  "namespace": "jsHarmonyFactory",
  //Import external files
  "key": @importstr("sample.sql"),
  "key": @importjson("sample.scriplet"),
}